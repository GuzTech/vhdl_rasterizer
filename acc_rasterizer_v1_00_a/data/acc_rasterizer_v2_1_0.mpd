###################################################################
##
## Name     : acc_rasterizer
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
##			: Created by Oguz Meteer
###################################################################

BEGIN acc_rasterizer

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL

OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = MIX

OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION DESC = Rasterizer engine

## Bus Interfaces
BUS_INTERFACE BUS = ACC_IN , BUS_STD = ACC, BUS_TYPE = TARGET
BUS_INTERFACE BUS = ACC_OUT , BUS_STD = ACC, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = ACC_CONF, BUS_TYPE = TARGET, BUS_STD = CONF_ACC
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

## Generics for VHDL or Parameters for Verilog
# Accelerator parameters
PARAMETER ADDR_WIDTH     = 32, DT = INTEGER
PARAMETER DATA_WIDTH     = 32, DT = INTEGER, RANGE = (32, 64, 128)
PARAMETER CONF_ADDR_SIZE = 12, DT = INTEGER

# AXI parameters
PARAMETER C_USE_WSTRB        = 1,    DT = INTEGER,              ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_ADDR_WIDTH = 32,   DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 256,  DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_PROTOCOL   = AXI4, DT = STRING,  BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

## Ports
PORT rstn = "", DIR = I, SIGIS = RST
PORT clk = "", DIR = I, SIGIS = CLK

# Ring inputs
PORT addr_in = addr, BUS = ACC_IN, DIR = I, VEC = [(ADDR_WIDTH-1):0]
PORT data_in = data, BUS = ACC_IN, DIR = I, VEC = [(DATA_WIDTH-1):0]
PORT mask_in = mask, BUS = ACC_IN, DIR = I, VEC = [((DATA_WIDTH/8)-1):0]
PORT valid_in = valid, BUS = ACC_IN, DIR = I
PORT accept_in = accept, BUS = ACC_IN, DIR = O

# Ring output
PORT addr_out = addr, BUS = ACC_OUT, DIR = O, VEC = [(ADDR_WIDTH-1):0]
PORT data_out = data, BUS = ACC_OUT, DIR = O, VEC = [(DATA_WIDTH-1):0]
PORT mask_out = mask, BUS = ACC_OUT, DIR = O, VEC = [((DATA_WIDTH/8)-1):0]
PORT valid_out = valid, BUS = ACC_OUT, DIR = O
PORT accept_out = accept, BUS = ACC_OUT, DIR = I

# Configuration
PORT conf_addr = addr, DIR = I, VEC = [(CONF_ADDR_SIZE-1):0], BUS = ACC_CONF
PORT conf_data_mosi = data_mosi, DIR = I, VEC = [DATA_WIDTH-1:0], BUS = ACC_CONF
PORT conf_data_miso = data_miso, DIR = O, VEC = [DATA_WIDTH-1:0], BUS = ACC_CONF
PORT conf_rnw = rnw, DIR = I, BUS = ACC_CONF
PORT conf_cs = cs, DIR = I, BUS = ACC_CONF
PORT conf_rdack = rdack, DIR = O, BUS = ACC_CONF
PORT conf_wrack = wrack, DIR = O, BUS = ACC_CONF
PORT conf_done = done, DIR = O, BUS = ACC_CONF

# AXI4 write port
PORT m_axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI
PORT m_axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI
PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI

#PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH)-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI

PORT m_axi_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI
PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI

#PORT m_axi_wdata = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
#PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wdata = WDATA, DIR = O, VEC = [255:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI

PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI

##END
